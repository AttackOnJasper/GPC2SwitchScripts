#pragma METAINFO("ac_new", 1, 0, "AttackOnJasper")

/***
 * GPC script for connecting RingCon to Animal Crossing: New Horizon
 * Author AttackOnJasper
 * 
 * THIS PROGRAM IS LICENSED UNDER GPL
 * Copyright (c) 2021 AttackOnJasper
 * https://github.com/AttackOnJasper/GPC2SwitchScripts
 *
 * Disclaimer: Please credit @AttackOnJasper for any online posts. I spent several days to learn GPC and implement this script
 * 转载请尊重作者的劳动成果并标明出处，谢谢！
**/

#include <switch.gph>
#include <remapper.gph>

/***
 * Ring Con axis system
	* Origin - We use the center of the Ring Con as the origin of the axis
	* ACCEL_2_X - Vertical distance of the Joy Con w.r.t. the center. Range: -25 ~ 25. Positive ACCEL_2_X means that the Joy Con is above the origin
	* ACCEL_2_Y - Horizontal distance of the Joy Con w.r.t. the center. Range: -25 ~ 25. Positive ACCEL_2_Y means that the Joy Con is on the right side of the origin
	* ACCEL_2_Z - If positive value - Ring Con has been flipped backwards. Range: -25 ~ 25
 * Ring Con Acceleration
    * SWITCH_GYROX - Centripetal acceleration against vertical axis; Positive - flip anticlockwise
	* SWITCH_GYROY - Centripetal acceleration against horizontal axis; Positive - flip anticlockwise
    * SWITCH_GYROZ - Centripetal acceleration against origin; Positive - Anticlockwise rotation
**/
#define RING_CON_NORMAL_POS_MAX 25
#define RING_CON_TRIGGER_THRESHOLD_LOW 5.0
#define RING_CON_TRIGGER_THRESHOLD_MEDIUM 10.0
#define RING_CON_TRIGGER_THRESHOLD_HIGH 20.0
#define RING_CON_TRIGGER_THRESHOLD_MAX 25.0

/***
  * Leg Con (JoyCon) axis system
  * Origin - we use the center of the Leg Con as the origin of the axis
  * Leg Con Acceleration
    * SWITCH_GYROX - Centripetal acceleration against horizontal axis; Positive - Raise the leg up
	* SWITCH_GYROY - Centripetal acceleration against vertical axis; Positive - turn clockwise
    * SWITCH_GYROZ - Centripetal acceleration against origin; Positive - Anticlockwise rotation
*/
#define LEG_CON_TRIGGER_THRESHOLD_LOW 5
#define LEG_CON_TRIGGER_THRESHOLD_MEDIUM 10
#define LEG_CON_TRIGGER_THRESHOLD_HIGH 20
#define LEG_CON_TRIGGER_THRESHOLD_MAX 25

#define ACC_THRESHOLD_LOW 3
#define ACC_THRESHOLD_MEDIUM 10
#define ACC_THRESHOLD_HIGH 20

#define BUTTON_LOW 10
#define BUTTON_MEDIUM 68
#define BUTTON_MAX 100.0

#define DEGREE_RATE_HIGH 0.2
#define DEGREE_RATE_LOW 0.1

#define WALK_CHECK_INDEX 1

/***
 * Macros
 */
combo PressA {
  set_val(SWITCH_A,100); // Press A
  wait(100);              // (Press) for 100ms
}

combo PressB {
  set_val(SWITCH_B,100); // Press B
  wait(100);              // (Press) for 100ms
  wait(50);
}

combo PressY {
  set_val(SWITCH_Y,100); // Press Y
  wait(100);              // (Press) for 100ms
}

combo PressX {
  set_val(SWITCH_X,100); // Press X
  wait(100);              // (Press) for 100ms
}

combo PressZL {
  set_val(SWITCH_ZL,100); // Press X
  wait(100);              // (Press) for 100ms
}

/***
 * Remapping of right joy-con values to map GYRO_1_X, GYRO_1_Y, GYRO_1_Z to PADDLE_1,  PADDLE_2,  PADDLE_3
 * The values are re-mapped because both left and right joy cons contribute to GYRO_1_X, GYRO_1_Y, GYRO_1_Z values
 * After remapping, left joy-con's GYRO values would be in GYRO_1_X, GYRO_1_Y, GYRO_1_Z, while right joy-con's GYRO values
 * would be in PADDLE_1,  PADDLE_2,  PADDLE_3.
 */
const uint8 rightJoyConLayout[43] = {
    RMP_BT_A,
    BUTTON_1,  BUTTON_2,  BUTTON_3,  BUTTON_4, BUTTON_5, BUTTON_6,  BUTTON_7, 
    BUTTON_8,  BUTTON_9,  BUTTON_10, BUTTON_11, BUTTON_12, BUTTON_13, BUTTON_14, 
	BUTTON_15, BUTTON_16, BUTTON_17,  BUTTON_18, BUTTON_19, BUTTON_20, BUTTON_21, 
    STICK_1_X, STICK_1_Y, STICK_2_X, STICK_2_Y, 
    POINT_1_X, POINT_1_Y, POINT_2_X, POINT_2_Y, 
    ACCEL_1_X, ACCEL_1_Y, ACCEL_1_Z, ACCEL_2_X, ACCEL_2_Y, ACCEL_2_Z,
    PADDLE_1,  PADDLE_2,  PADDLE_3, GYRO_1_X, GYRO_1_Y, GYRO_1_Z, PADDLE_4
};

uint8 runCheck;
uint8 walkCheck;
uint8 highLegXAccDuration;
uint8 highLegXPosDuration;
uint8 mediumLegXAccDuration;
uint8 ringConXPositiveAccDuration;
uint8 ringConXNegativeAccDuration;
uint8 ringConYAccDuration;
uint8 legConXNegativePosDuration;
uint8 legConZPositivePosDuration;
uint8 legConZNegativePosDuration;
uint8 yButtonDuration;

fix32 directionDegree;

bool isBagOpen;
bool isPhoneOpen;
bool isInSubMenuLayer;

// Need to connect right joy con first.
init
{
	remapper(rightJoyConLayout);
	runCheck = 0;
	pmem_load();
	pmem_read(WALK_CHECK_INDEX, &walkCheck); // save in pmem to prevent random mutation
	directionDegree = 180.0;
	walkCheck = 0;
	
	ringConXPositiveAccDuration = 0;
	ringConXNegativeAccDuration = 0;
	ringConYAccDuration = 0;
	
	highLegXAccDuration = 0;
	highLegXPosDuration = 0;
	mediumLegXAccDuration = 0;
	legConXNegativePosDuration = 0;
	legConZPositivePosDuration = 0;
	legConZNegativePosDuration = 0;
	yButtonDuration = 0;
	
	isBagOpen = FALSE;
	isPhoneOpen = FALSE;
	isInSubMenuLayer = FALSE;
}

main {
	executeMapping();
}

void executeMapping() {
	fix32 ringConVerticalPos = get_val(ACCEL_2_X);
	fix32 ringConHorizontalPos = get_val(ACCEL_2_Y);
	fix32 ringConFlipPos = get_val(ACCEL_2_Z);
	
	fix32 absRingConVerticalPos = abs(ringConVerticalPos);
	fix32 absRingConHorizontalPos = abs(ringConHorizontalPos);
	fix32 absRingConFlipPos = abs(ringConFlipPos);
	
	int legConXPos = (int32)get_val(SWITCH_ACCX);
	int legConYPos = (int32)get_val(SWITCH_ACCY);
	int legConZPos = (int32)get_val(SWITCH_ACCZ);
	
	int absLegConXPos = abs(legConXPos);
	int absLegConZPos = abs(legConZPos);

	int ringConXAcc = (int32)get_val(PADDLE_1);
	int ringConYAcc = (int32)get_val(PADDLE_2);
	int ringConZAcc = (int32)get_val(PADDLE_3);
	
	int absRingConXAcc = abs(ringConXAcc);
	int absRingConYAcc = abs(ringConYAcc);
	int absRingConZAcc = abs(ringConZAcc);
	
	int legXAcc = (int32)get_val(SWITCH_GYROX);
	int legYAcc = (int32)get_val(SWITCH_GYROY);
	int legZAcc = (int32)get_val(SWITCH_GYROZ);
	
	// Press X by spinning body with Ring Con from right to left
	if (!isBagOpen && ringConXAcc > ACC_THRESHOLD_MEDIUM && ringConVerticalPos > RING_CON_TRIGGER_THRESHOLD_HIGH) {
		ringConXPositiveAccDuration++;
		if (ringConXPositiveAccDuration >= 40) {
			printf("Opening the bag.");
			clearButtons();
			combo_run(PressX);
			isBagOpen = TRUE;
			isPhoneOpen = FALSE;
			isInSubMenuLayer = FALSE;
			return;
		}
	} else {
		ringConXPositiveAccDuration = 0;
	}
	
	if (isBagOpen) {
		if (ringConXAcc < -ACC_THRESHOLD_MEDIUM && ringConVerticalPos > RING_CON_TRIGGER_THRESHOLD_HIGH) {
			ringConXNegativeAccDuration++;
			if (ringConXNegativeAccDuration >= 50) {
				ringConXNegativeAccDuration = 0;
				if (isInSubMenuLayer) {
					isInSubMenuLayer = FALSE;
				} else {
					printf("Closing the bag.");
					isBagOpen = FALSE;
				}
				clearButtons();
				combo_run(PressB);
				return;
			}
		} else {
			ringConXNegativeAccDuration = 0;
			// navigate through the bag
			if (absRingConHorizontalPos > RING_CON_TRIGGER_THRESHOLD_MEDIUM) {
				set_val(SWITCH_LX, ringConHorizontalPos > 0.0 ? BUTTON_MEDIUM : -BUTTON_MEDIUM);
				return;
			} 
			if (absRingConFlipPos > RING_CON_TRIGGER_THRESHOLD_MEDIUM) {
				set_val(SWITCH_LY, ringConFlipPos > 0.0 ? BUTTON_MEDIUM : -BUTTON_MEDIUM);
				return;
			} 
			if (legXAcc > ACC_THRESHOLD_HIGH) {
				highLegXAccDuration++;
				if (highLegXAccDuration > 60) {
					highLegXAccDuration = 0;
					combo_run(PressA);
					if (isInSubMenuLayer) {
						printf("Closing the bag.");
						isBagOpen = FALSE;
					} else {
						isInSubMenuLayer = TRUE;
					}
				}
			} else {
				highLegXAccDuration = 0;
			}
		}
		return;
	}
	
	// Press ZL by raise leg up
	if (!isPhoneOpen && legConZPos == -LEG_CON_TRIGGER_THRESHOLD_MAX && legConYPos > -10) {
		legConZNegativePosDuration++;
		if (legConZNegativePosDuration > 10 && !isPhoneOpen) {
			legConZNegativePosDuration = 0;
			printf("Opening the phone.");
			clearButtons();
			combo_run(PressZL);
			isBagOpen = FALSE;
			isPhoneOpen = TRUE;
			isInSubMenuLayer = FALSE;
		}
		return;
	} else {
		legConZNegativePosDuration = 0;
	}
	
	if (isPhoneOpen) {
		// Kick back to close the phone
		if (legConZPos > LEG_CON_TRIGGER_THRESHOLD_MEDIUM) {
			legConZPositivePosDuration++;
			if (legConZPositivePosDuration > 20) {
				legConZPositivePosDuration = 0;
				clearButtons();
				combo_run(PressB);
				if (isInSubMenuLayer) {
					isInSubMenuLayer = FALSE;
				} else {
					printf("Closing the phone.");
					isPhoneOpen = FALSE;
				}
				return;
			}
		} else {
			legConZPositivePosDuration = 0;
			// navigate through the phone
			if (absRingConHorizontalPos > RING_CON_TRIGGER_THRESHOLD_MEDIUM) {
				set_val(SWITCH_LX, ringConHorizontalPos > 0.0 ? BUTTON_MEDIUM : -BUTTON_MEDIUM);
				return;
			}
			if (absRingConFlipPos > RING_CON_TRIGGER_THRESHOLD_MEDIUM) {
				set_val(SWITCH_LY, ringConFlipPos > 0.0 ? BUTTON_MEDIUM : -BUTTON_MEDIUM);
				return;
			} 
			// Side kick to Press item
			if (absLegConXPos > ACC_THRESHOLD_MEDIUM) {
				highLegXPosDuration++;
				if (highLegXPosDuration > 15) {
					highLegXPosDuration = 0;
					combo_run(PressA);
					if (isInSubMenuLayer) {
						printf("Closing the phone.");
						isPhoneOpen = FALSE;
					} else {
						isInSubMenuLayer = TRUE;
					}
				} else {
					highLegXPosDuration = 0;
				}
			}
		}
		return;
	}
	
	// Reset to prevent unexpected values
	isBagOpen = FALSE;
	isPhoneOpen = FALSE;
	
	// Press Y by squating and placing ring con parallel to the ground
	/*
	if (absRingConFlipPos > RING_CON_TRIGGER_THRESHOLD_MAX
		&& legXAcc > ACC_THRESHOLD_MEDIUM) {
		yButtonDuration++;
		if (yButtonDuration >= 10) {
			clearButtons();
			combo_run(PressY);
		}
		return;
	} else {
		yButtonDuration = 0;
	}
	*/

	// Check if running / walkinng by checking the duration of leg con acceleration. 
	// Typically during running the high acceleration would persist for 5 main function refreshes
	if (abs(legXAcc) > ACC_THRESHOLD_MEDIUM) {
		walkCheck = 100;
		pmem_write(WALK_CHECK_INDEX, walkCheck);
		pmem_save();
		if (abs(legXAcc) > ACC_THRESHOLD_HIGH) {
			highLegXAccDuration += 1;
		} else {
			highLegXAccDuration = 0;
		}
		pmem_save(); 
	} else {
		if (walkCheck == 1) {	// store only when walkCheck goes back to 0 to prevent CPU overloading
			walkCheck--;
			pmem_write(WALK_CHECK_INDEX, walkCheck);
			pmem_save();
		}
		walkCheck = max(0, walkCheck - 1);
	}
	if (highLegXAccDuration >= 10) {
		runCheck = 300;
	} else {
		runCheck--;
	}

	// Upon walking
	if (walkCheck > 0) {
		
		// Upon running
		if (runCheck > 0) {
			set_val(SWITCH_B, BUTTON_MAX);
		}
		
		fix32 newX = ringConHorizontalPos * 4.0; // x direction ratio
		fix32 newY = min(ringConFlipPos * 5.0, BUTTON_MAX); // y direction ratio
		
		// Walking/Running direction
		if (abs(ringConHorizontalPos) - abs(ringConFlipPos) > 5.0 || abs(newX) > 100.0) { // More horizontal movement
			newX = ringConHorizontalPos > 0.0 ? BUTTON_MAX : -BUTTON_MAX;
		} else if (abs(ringConFlipPos) - abs(ringConHorizontalPos) > 5.0 || abs(newY) > 100.0) { // More vertical movement
			newY = ringConFlipPos > 0.0 ? BUTTON_MAX : -BUTTON_MAX;
		}
		set_val(SWITCH_LX, newX);
		set_val(SWITCH_LY, newY);
		return;
	}
	
	// Changing standing stale direction only when RingCon is rotated
	// If rotating RingCon -> start updating direction.
	if (absRingConVerticalPos < RING_CON_TRIGGER_THRESHOLD_LOW
		&& absRingConFlipPos < RING_CON_TRIGGER_THRESHOLD_LOW) {
		// Update direction degree
		if (abs(ringConHorizontalPos) > RING_CON_TRIGGER_THRESHOLD_HIGH) {
			directionDegree += ringConHorizontalPos > 0.0 ? -DEGREE_RATE_HIGH : DEGREE_RATE_HIGH;
		} else if (abs(ringConHorizontalPos) > RING_CON_TRIGGER_THRESHOLD_MEDIUM) {
			directionDegree += ringConHorizontalPos > 0.0 ? -DEGREE_RATE_LOW : DEGREE_RATE_LOW;
		}
		
		// Calculate stick values, 
		set_val(SWITCH_LX, -sin(deg2rad(directionDegree)) * 10.0);
		set_val(SWITCH_LY, -cos(deg2rad(directionDegree)) * 10.0);
		return;
	}
	
	// Press A
	if (absRingConYAcc > ACC_THRESHOLD_MEDIUM
		&& absRingConXAcc < ACC_THRESHOLD_LOW
		&& absRingConZAcc < ACC_THRESHOLD_LOW) {
		ringConYAccDuration++;
	} else {
		ringConYAccDuration = 0;
	}	
	if (ringConYAccDuration >= 15) {
		clearButtons();
		combo_run(PressA);
		return;
	}
}

void clearButtons() 
{
    uint8 i = BUTTON_1;
 
    for(; i<=BUTTON_21; ++i) {
        set_val(i, 0.0);
    }
}
